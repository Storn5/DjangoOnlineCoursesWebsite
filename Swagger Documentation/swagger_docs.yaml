swagger: "2.0"
info:
  description: "Server for online courses."
  version: "1.0.0"
  title: "Online Courses"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "stornstornstorn@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "course"
  description: "Everything about our courses"
- name: "application"
  description: "Applications for our courses"
- name: "user"
  description: "Operations about user"
paths:
  /course:
    post:
      tags:
      - "course"
      summary: "Add a new Course"
      description: ""
      operationId: "addCourse"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Course that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Course"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        405:
          description: "Invalid input"
      #security:
      #- petstore_auth:
      #  - "write:courses"
      #  - "read:courses"
  /course/findByTeacher:
    get:
      tags:
      - "course"
      summary: "Finds courses by teacher"
      description: "Teacher can be provided with comma separated strings"
      operationId: "findCoursesByTeacher"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teacherId"
        in: "query"
        description: "Teacher ID for filter"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
        400:
          description: "Invalid status value"
      #security:
      #- petstore_auth:
      #  - "write:pets"
      #  - "read:pets"
  /course/{courseId}:
    get:
      tags:
      - "course"
      summary: "Find course by ID"
      description: "Returns a single course"
      operationId: "getCourseById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "ID of course to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Course not found"
      #security:
      #- api_key: []
    post:
      tags:
      - "course"
      summary: "Updates a course with form data"
      description: ""
      operationId: "updateCourseWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "ID of course that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the course"
        required: false
        type: "string"
      - $ref: "#/definitions/User"
      responses:
        405:
          description: "Invalid input"
      #security:
      #- petstore_auth:
      #  - "write:pets"
      #  - "read:pets"
    delete:
      tags:
      - "course"
      summary: "Deletes a course"
      description: ""
      operationId: "deleteCourse"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      #- name: "api_key"
      #  in: "header"
      #  required: false
      #  type: "string"
      - name: "courseId"
        in: "path"
        description: "Course ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Course not found"
      #security:
      #- petstore_auth:
      #  - "write:pets"
      #  - "read:pets"
  /user/{username}/application:
    post:
      tags:
      - "application"
      summary: "Place an application for a course"
      description: ""
      operationId: "placeApplication"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "username"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "application placed for course"
        required: true
        schema:
          $ref: "#/definitions/Application"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Application"
        400:
          description: "Invalid Application"
  /application/{applicationId}:
    get:
      tags:
      - "application"
      summary: "Find application by ID"
      description: ""
      operationId: "getApplicationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "ID of application that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Application"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Application not found"
    put:
      tags:
      - "application"
      summary: "Approve/Reject application"
      description: ""
      operationId: "approveRejectApplication"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "applicationId"
        in: "path"
        description: "ID of the application that needs to be approved/rejected"
        required: true
        type: "integer"
        format: "int64"
      - name: "approval"
        in: "path"
        required: true
        type: "string"
        description: "Approved or rejected"
        enum:
          - "approved"
          - "rejected"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Application not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  # /user/createWithArray:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithArrayInput"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "List of user object"
  #       required: true
  #       schema:
  #         type: "array"
  #         items:
  #           $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/createWithList:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithListInput"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "List of user object"
  #       required: true
  #       schema:
  #         type: "array"
  #         items:
  #           $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          #headers:
          #  X-Rate-Limit:
          #    type: "integer"
          #    format: "int32"
          #    description: "calls per hour allowed by the user"
          #  X-Expires-After:
          #    type: "string"
          #    format: "date-time"
          #    description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
definitions:
  Application:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      courseId:
        type: "integer"
        format: "int64"
      studentId:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Application Status"
        enum:
        - "placed"
        - "approved"
        - "rejected"
    xml:
      name: "Application"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      isTeacher:
        type: "boolean"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      #teachingCourses:
      #  type: "array"
      #  items:
      #    $ref: "#/definitions/Course"
      #learningCourses:
      #  type: "array"
      #  items:
      #    $ref: "#/definitions/Course"
      userStatus:
        type: "integer"
        format: "int32"
    xml:
      name: "User"
  Course:
    type: "object"
    required:
    - "name"
    - "teacher"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      teacherId:
        type: "integer"
        format: "int64"
        #$ref: "#/definitions/User"
      students:
        type: "array"
        items:
          type: "integer"
          format: "int64"
        maxItems: 5
    xml:
      name: "Course"
  # ApiResponse:
  #   type: "object"
  #   properties:
  #     code:
  #       type: "integer"
  #       format: "int32"
  #     type:
  #       type: "string"
  #     message:
  #       type: "string"
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /StornCompany/yaroslavs-courses/1.0.0
schemes:
 - https
 - http